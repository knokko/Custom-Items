package nl.knokko.customitems.drops;

import nl.knokko.customitems.util.CustomItemUtils;

public enum BlockType {
	
	AIR,
	STONE,
	GRASS,
	DIRT,
	COBBLESTONE,
	WOOD,
	SAPLING,
	BEDROCK,
	WATER,
	STATIONARY_WATER,
	LAVA,
	STATIONARY_LAVA,
	SAND,
	GRAVEL,
	GOLD_ORE,
	IRON_ORE,
	COAL_ORE,
	LOG,
	LEAVES,
	SPONGE,
	GLASS,
	LAPIS_ORE,
	LAPIS_BLOCK,
	DISPENSER,
	SANDSTONE,
	NOTE_BLOCK,
	BED_BLOCK,
	POWERED_RAIL,
	DETECTOR_RAIL,
	PISTON_STICKY_BASE,
	WEB,
	LONG_GRASS,
	DEAD_BUSH,
	PISTON_BASE,
	PISTON_EXTENSION,
	WOOL,
	PISTON_MOVING_PIECE,
	YELLOW_FLOWER,
	RED_ROSE,
	BROWN_MUSHROOM,
	RED_MUSHROOM,
	GOLD_BLOCK,
	IRON_BLOCK,
	DOUBLE_STEP,
	STEP,
	BRICK,
	TNT,
	BOOKSHELF,
	MOSSY_COBBLESTONE,
	OBSIDIAN,
	TORCH,
	FIRE,
	MOB_SPAWNER,
	WOOD_STAIRS,
	CHEST,
	REDSTONE_WIRE,
	DIAMOND_ORE,
	DIAMOND_BLOCK,
	WORKBENCH,
	CROPS,
	SOIL,
	FURNACE,
	BURNING_FURNACE,
	SIGN_POST,
	WOODEN_DOOR,
	LADDER,
	RAILS,
	COBBLESTONE_STAIRS,
	WALL_SIGN,
	LEVER,
	STONE_PLATE,
	IRON_DOOR_BLOCK,
	WOOD_PLATE,
	REDSTONE_ORE,
	GLOWING_REDSTONE_ORE,
	REDSTONE_TORCH_OFF,
	REDSTONE_TORCH_ON,
	STONE_BUTTON,
	SNOW,
	ICE,
	SNOW_BLOCK,
	CACTUS,
	CLAY,
	SUGAR_CANE_BLOCK,
	JUKEBOX,
	FENCE,
	PUMPKIN,
	NETHERRACK,
	SOUL_SAND,
	GLOWSTONE,
	PORTAL,
	JACK_O_LANTERN,
	CAKE_BLOCK,
	DIODE_BLOCK_OFF,
	DIODE_BLOCK_ON,
	STAINED_GLASS,
	TRAP_DOOR,
	MONSTER_EGGS,
	SMOOTH_BRICK,
	HUGE_MUSHROOM_1,
	HUGE_MUSHROOM_2,
	IRON_FENCE,
	THIN_GLASS,
	MELON_BLOCK,
	PUMPKIN_STEM,
	MELON_STEM,
	VINE,
	FENCE_GATE,
	BRICK_STAIRS,
	SMOOTH_STAIRS,
	MYCEL,
	WATER_LILY,
	NETHER_BRICK,
	NETHER_FENCE,
	NETHER_BRICK_STAIRS,
	NETHER_WARTS,
	ENCHANTMENT_TABLE,
	BREWING_STAND,
	CAULDRON,
	ENDER_PORTAL,
	ENDER_PORTAL_FRAME,
	ENDER_STONE,
	DRAGON_EGG,
	REDSTONE_LAMP_OFF,
	REDSTONE_LAMP_ON,
	WOOD_DOUBLE_STEP,
	WOOD_STEP,
	COCOA,
	SANDSTONE_STAIRS,
	EMERALD_ORE,
	ENDER_CHEST,
	TRIPWIRE_HOOK,
	TRIPWIRE,
	EMERALD_BLOCK,
	SPRUCE_WOOD_STAIRS,
	BIRCH_WOOD_STAIRS,
	JUNGLE_WOOD_STAIRS,
	COMMAND,
	BEACON,
	COBBLE_WALL,
	FLOWER_POT,
	CARROT,
	POTATO,
	WOOD_BUTTON,
	SKULL,
	ANVIL,
	TRAPPED_CHEST,
	GOLD_PLATE,
	IRON_PLATE,
	REDSTONE_COMPARATOR_OFF,
	REDSTONE_COMPARATOR_ON,
	DAYLIGHT_DETECTOR,
	REDSTONE_BLOCK,
	QUARTZ_ORE,
	HOPPER,
	QUARTZ_BLOCK,
	QUARTZ_STAIRS,
	ACTIVATOR_RAIL,
	DROPPER,
	STAINED_CLAY,
	STAINED_GLASS_PANE,
	LEAVES_2,
	LOG_2,
	ACACIA_STAIRS,
	DARK_OAK_STAIRS,
	SLIME_BLOCK,
	BARRIER,
	IRON_TRAPDOOR,
	PRISMARINE,
	SEA_LANTERN,
	HAY_BLOCK,
	CARPET,
	HARD_CLAY,
	COAL_BLOCK,
	PACKED_ICE,
	DOUBLE_PLANT,
	STANDING_BANNER,
	WALL_BANNER,
	DAYLIGHT_DETECTOR_INVERTED,
	RED_SANDSTONE,
	RED_SANDSTONE_STAIRS,
	DOUBLE_STONE_SLAB2,
	STONE_SLAB2,
	SPRUCE_FENCE_GATE,
	BIRCH_FENCE_GATE,
	JUNGLE_FENCE_GATE,
	DARK_OAK_FENCE_GATE,
	ACACIA_FENCE_GATE,
	SPRUCE_FENCE,
	BIRCH_FENCE,
	JUNGLE_FENCE,
	DARK_OAK_FENCE,
	ACACIA_FENCE,
	SPRUCE_DOOR,
	BIRCH_DOOR,
	JUNGLE_DOOR,
	ACACIA_DOOR,
	DARK_OAK_DOOR,
	END_ROD,
	CHORUS_PLANT,
	CHORUS_FLOWER,
	PURPUR_BLOCK,
	PURPUR_PILLAR,
	PURPUR_STAIRS,
	PURPUR_DOUBLE_SLAB,
	PURPUR_SLAB,
	END_BRICKS,
	BEETROOT_BLOCK,
	GRASS_PATH,
	END_GATEWAY,
	COMMAND_REPEATING,
	COMMAND_CHAIN,
	FROSTED_ICE,
	MAGMA,
	NETHER_WART_BLOCK,
	RED_NETHER_BRICK,
	BONE_BLOCK,
	STRUCTURE_VOID,
	OBSERVER,
	WHITE_SHULKER_BOX,
	ORANGE_SHULKER_BOX,
	MAGENTA_SHULKER_BOX,
	LIGHT_BLUE_SHULKER_BOX,
	YELLOW_SHULKER_BOX,
	LIME_SHULKER_BOX,
	PINK_SHULKER_BOX,
	GRAY_SHULKER_BOX,
	SILVER_SHULKER_BOX,
	CYAN_SHULKER_BOX,
	PURPLE_SHULKER_BOX,
	BLUE_SHULKER_BOX,
	BROWN_SHULKER_BOX,
	GREEN_SHULKER_BOX,
	RED_SHULKER_BOX,
	BLACK_SHULKER_BOX,
	WHITE_GLAZED_TERRACOTTA,
	ORANGE_GLAZED_TERRACOTTA,
	MAGENTA_GLAZED_TERRACOTTA,
	LIGHT_BLUE_GLAZED_TERRACOTTA,
	YELLOW_GLAZED_TERRACOTTA,
	LIME_GLAZED_TERRACOTTA,
	PINK_GLAZED_TERRACOTTA,
	GRAY_GLAZED_TERRACOTTA,
	SILVER_GLAZED_TERRACOTTA,
	CYAN_GLAZED_TERRACOTTA,
	PURPLE_GLAZED_TERRACOTTA,
	BLUE_GLAZED_TERRACOTTA,
	BROWN_GLAZED_TERRACOTTA,
	GREEN_GLAZED_TERRACOTTA,
	RED_GLAZED_TERRACOTTA,
	BLACK_GLAZED_TERRACOTTA,
	CONCRETE,
	CONCRETE_POWDER,
	STRUCTURE_BLOCK;
	
	private static final BlockType[] ALL_TYPES = values();
	
	public static final int AMOUNT = ALL_TYPES.length;
	
	public static BlockType getByOrdinal(int ordinal) {
		return ALL_TYPES[ordinal];
	}
	
	public static BlockType fromBukkitMaterial(Enum<?> material) {
		try {
			return valueOf(material.name());
		} catch (IllegalArgumentException ex) {
			return null;
		}
	}
	
	private final Object bukkitMaterial;
	
	BlockType(){
		if (CustomItemUtils.IS_PLUGIN) {
			bukkitMaterial = CustomItemUtils.getBukkitMaterial(name());
		} else {
			bukkitMaterial = null;
		}
	}
	
	@Override
	public String toString() {
		return name().toLowerCase().replace('_', ' ');
	}
	
	public Object getBukkitMaterial() {
		if (bukkitMaterial == null) {
			throw new UnsupportedOperationException("The Bukkit API is not available");
		} else {
			return bukkitMaterial;
		}
	}
}
